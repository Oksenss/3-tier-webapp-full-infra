name: Deploy to Production (Blue/Green)

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  deploy-prod:
    name: Build and Deploy to Prod (Blue/Green)
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials for Prod
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT
        working-directory: ./backend

      ### MODIFIED - Blue/Green Deployment Steps ###
      - name: Download current task definition
        id: task-def-download
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_FAMILY }} --query taskDefinition > task-definition.json
          echo "task-def-path=$(pwd)/task-definition.json" >> $GITHUB_OUTPUT

      - name: Render new task definition with new image
        id: task-def-render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-download.outputs.task-def-path }}
          container-name: prod-app-container # Your production container name
          image: ${{ steps.build-image.outputs.image }}

      - name: Create CodeDeploy AppSpec file
        id: appspec
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://${{ steps.task-def-render.outputs.task-definition }} --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "New task definition ARN is $TASK_DEF_ARN"
          cat > appspec.json <<EOF
          {
            "version": 0.0,
            "Resources": [
              {
                "TargetService": {
                  "Type": "AWS::ECS::Service",
                  "Properties": {
                    "TaskDefinition": "$TASK_DEF_ARN",
                    "LoadBalancerInfo": {
                       "ContainerName": "prod-app-container",
                       "ContainerPort": 8080
                    }
                  }
                }
              }
            ]
          }
          EOF
          echo "appspec_path=$(pwd)/appspec.json" >> $GITHUB_OUTPUT
          echo "task_definition_arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Start Blue/Green Deployment
        id: deploy
        run: |
          APPSPEC_CONTENT=$(jq -c . < ${{ steps.appspec.outputs.appspec_path }})
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name ${{ secrets.CODEDEPLOY_APP_NAME }} \
            --deployment-group-name ${{ secrets.CODEDEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --description "Deployment for commit ${{ github.sha }}" \
            --revision "{\"revisionType\":\"AppSpecContent\",\"appSpecContent\":{\"content\":\"$APPSPEC_CONTENT\"}}" \
            --query 'deploymentId' --output text)
          echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT

      - name: Wait for Blue/Green deployment to complete
        run: |
          echo "Waiting for deployment ${{ steps.deploy.outputs.deployment_id }} to complete..."
          aws deploy wait deployment-successful --deployment-id ${{ steps.deploy.outputs.deployment_id }}
          echo "Deployment successful!"

      # --- Frontend Steps (unchanged) ---
      - name: Build Frontend
        run: |
          npm install
          npm run build
        working-directory: ./frontend

      - name: Deploy Frontend to S3
        run: |
          aws s3 sync ./build s3://${{ secrets.S3_BUCKET_NAME }} --delete
        working-directory: ./frontend

      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
